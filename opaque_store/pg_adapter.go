package opaque_store

import (
	"database/sql"
	"encoding/json"
	"fmt"

	uagc "github.com/drlzh/mng-app-user-auth-prot/user_auth_global_config"
)

// !!! ENTIRELY GENERATED BY CHATGPT - NOT YET REVIEWED !!!

// Ensure your DB table has the following schema (PostgreSQL):
// CREATE TABLE opaque_client_records (
//    user_identifier TEXT PRIMARY KEY,
//    tenant_id TEXT NOT NULL,
//    user_id TEXT NOT NULL,
//    sub_id TEXT,
//    user_group_id TEXT,
//    record BYTEA NOT NULL
//);

type PgAdapter struct {
	db        *sql.DB
	tableName string
}

func NewPgAdapter(db *sql.DB) *PgAdapter {
	return &PgAdapter{
		db:        db,
		tableName: "opaque-server-store",
	}
}

// Save stores or updates a registration record for a UniqueUser.
func (a *PgAdapter) Save(user uagc.UniqueUser, record []byte) error {
	userKey, err := json.Marshal(user)
	if err != nil {
		return fmt.Errorf("failed to marshal UniqueUser: %w", err)
	}
	query := fmt.Sprintf(`
		INSERT INTO %s (user_identifier, tenant_id, user_id, sub_id, user_group_id, record)
		VALUES ($1, $2, $3, $4, $5, $6)
		ON CONFLICT (user_identifier) DO UPDATE SET record = EXCLUDED.record
	`, a.tableName)
	_, err = a.db.Exec(query, string(userKey), user.TenantID, user.UserID, user.SubID, user.UserGroupID, record)
	return err
}

// Load retrieves the stored record for a UniqueUser.
func (a *PgAdapter) Load(user uagc.UniqueUser) ([]byte, error) {
	userKey, err := json.Marshal(user)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal UniqueUser: %w", err)
	}
	query := fmt.Sprintf(`SELECT record FROM %s WHERE user_identifier = $1`, a.tableName)
	row := a.db.QueryRow(query, string(userKey))

	var record []byte
	if err := row.Scan(&record); err != nil {
		return nil, err
	}
	return record, nil
}

// Exists checks whether a record exists for a UniqueUser.
func (a *PgAdapter) Exists(user uagc.UniqueUser) (bool, error) {
	userKey, err := json.Marshal(user)
	if err != nil {
		return false, fmt.Errorf("failed to marshal UniqueUser: %w", err)
	}
	query := fmt.Sprintf(`SELECT EXISTS (SELECT 1 FROM %s WHERE user_identifier = $1)`, a.tableName)
	row := a.db.QueryRow(query, string(userKey))

	var exists bool
	if err := row.Scan(&exists); err != nil {
		return false, err
	}
	return exists, nil
}

// FindAllIdentitiesForUserID returns all UniqueUser identities for a given user (within a tenant).
func (a *PgAdapter) FindAllIdentitiesForUserID(tenantID, userID string) ([]uagc.UniqueUser, error) {
	query := fmt.Sprintf(`SELECT user_identifier FROM %s WHERE tenant_id = $1 AND user_id = $2`, a.tableName)
	rows, err := a.db.Query(query, tenantID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var result []uagc.UniqueUser
	for rows.Next() {
		var userKey string
		if err := rows.Scan(&userKey); err != nil {
			return nil, err
		}
		var user uagc.UniqueUser
		if err := json.Unmarshal([]byte(userKey), &user); err != nil {
			return nil, fmt.Errorf("failed to unmarshal UniqueUser: %w", err)
		}
		result = append(result, user)
	}
	return result, nil
}

// Delete removes the registration record for a UniqueUser.
func (a *PgAdapter) Delete(user uagc.UniqueUser) error {
	userKey, err := json.Marshal(user)
	if err != nil {
		return fmt.Errorf("failed to marshal UniqueUser: %w", err)
	}
	query := fmt.Sprintf(`DELETE FROM %s WHERE user_identifier = $1`, a.tableName)
	_, err = a.db.Exec(query, string(userKey))
	return err
}
